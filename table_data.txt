CREATE TABLE Customer_Masters (
    Cust_Id NUMBER(6) NOT NULL,
    Cust_Name VARCHAR2(20) NOT NULL,
    Address VARCHAR2(50),
    Date_of_acc_creation DATE,
    Customer_Type CHAR(3)
);


CREATE TABLE Account_Masters  (
    Account_Number NUMBER(6) NOT NULL,
    Cust_ID NUMBER(6),
    Account_Type CHAR(3),
    Ledger_Balance NUMBER(10)
);


CREATE TABLE Transaction_Masters (
    Transaction_Id NUMBER(6) NOT NULL,
    Account_Number NUMBER(6),
    Date_of_Transaction DATE,
    From_Account_Number NUMBER(6) NOT NULL,
    To_Account_Number NUMBER(6) NOT NULL,
    Amount NUMBER(10) NOT NULL,
    Transaction_Type CHAR(2) NOT NULL
);


CREATE TABLE myEmp (
    EmpNo NUMBER(5),
    Ename VARCHAR2(50),
    City VARCHAR2(50),
    Designation VARCHAR2(50),
    Salary NUMBER(10, 2)
);

create sequence emp_seq start with 1 increment by 1;
create sequence cust_seq start with 1 increment by 1;
create sequence acc_seq start with 1 increment by 1;
create sequence transact_seq start with 1 increment by 1;






CREATE OR REPLACE TRIGGER check_account_type
BEFORE INSERT OR UPDATE ON Account_Masters
FOR EACH ROW
DECLARE
BEGIN
    IF :NEW.Account_Type not in ('SAV', 'SAL') then
        RAISE_APPLICATION_ERROR(-20010, 'Invalid Account_Type.');
    END IF;
END;

create or replace TRIGGER check_transaction_type
BEFORE INSERT OR UPDATE ON transaction_Masters
FOR EACH ROW
DECLARE
BEGIN
    IF :NEW.Transaction_Type not in ('CR', 'DB') then
        RAISE_APPLICATION_ERROR(-20011, 'Invalid Transaction_Type.');
    END IF;
END;

CREATE OR REPLACE TRIGGER check_customer_type
BEFORE INSERT OR UPDATE ON customer_Masters
FOR EACH ROW
DECLARE
BEGIN
    IF :NEW.customer_Type not in ('IND', 'NRI') then
        RAISE_APPLICATION_ERROR(-20012, 'Invalid Customer_Type.');
    END IF;
END;

CREATE OR REPLACE TRIGGER min_balance_for_savings
BEFORE INSERT OR UPDATE ON Account_Masters
FOR EACH ROW
DECLARE
    v_min_savings_balance NUMBER := 5000;
BEGIN
    IF :NEW.Account_Type = 'SAV' THEN
        -- Check for minimum savings balance
        IF :NEW.Ledger_Balance < v_min_savings_balance THEN
            RAISE_APPLICATION_ERROR(-20001, 'Minimum savings balance should be ' || v_min_savings_balance);
        END IF;
    END IF;
END;